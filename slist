#!/bin/bash

function waitlock
{
	local st=`date +%s` en
	while $( ! mkdir $lf &> /dev/null ); do
		sleep .1
		en=`date +%s`
		if(( en-st>10 )); then echo "`date +\"%D %T\"` obtaining slist lock failed" >> slist.log; exit -1; fi			
	done
}
function rmlock
{
	rmdir $lf
}

function tstart
{
	stime=`date +%s`
	snano=`date +%N`
}
function tend
{
	etime=`date +%s`
	enano=`date +%N`
	echo $((etime-stime))s, `echo "$enano-$snano" | bc`n
}

#in 1: string 
#out: string representation of an array.
function string_rep
{
	local str=( $1 )
	local out
	for ((i=0; i<${#str[*]}; i++)); do
		out[i]=\'${str[i]}\'
	done
	echo ${out[*]}
}

#in 1: array with scan entry
#out: string with comma separated descriptions
function get_descrs
{
	local i
	local ind=0
	local sea=( $1 )
	local desc=""
	local arr
	eval "arr=(\${$sea[*]})"
	for ((i=4; i<${#arr[*]}; i++)); do
		if [ -z "$desc" ]; then
			desc="${arr[i]}"
		else
			desc="${desc},${arr[i]}"
		fi
	done
	echo $desc
}

#in 1: array with scan entry
#in 2: description.
#out: 1 if descr field matches, nothing otherwise
#NOTE: brute force implementation, might need to improve later.
function match_descr
{
	local i
	local ind=0
	local sea=( $1 )	
	local descr=$2
	for ((i=4; i<${#sea[*]}; i++)); do
		if [ "$descr" == "${sea[i]}" ]; then
			echo "1"
			return
		fi
	done
}

#in (global): initialized arrays named after HOF IDs containing full scan info (descriptions start at pos. 4) 
#in (global): predef_scans
#in (global): predef_HOF_IDs
#in (global): predef_descrs
#out (global): arrays named U_{HOF_ID} containing user defined descriptions.

#out: 1 if modifications were made to HOFID_arrays; 0 otherwise.
#NOTE: slightly better than brute force implementation.
function match_descrs
{

	local i j sid shofid sdescr #iterate over
	local pnames #predefined HOF ID array names
	local pname #iterate over
	local found  f_ind
	local res=0 #signal if update happened
	local new_arr  old_arr
	 
	for ((i=0; i<${#predef_scans[*]}; i++));do
		#first, create a list of unique update candidate HOF ID's (pnames)
		sid=${predef_scans[i]}
		shofid=${predef_HOF_IDs[i]}
		sdescr=${predef_descrs[i]}
		pname=P_${shofid} #temporary array name holding ID -> descr sequence
		found=0	
		#check for uniqueness in pnames
		for((j=0;j<${#pnames[*]};j++)); do #pnames is created/updated later
			if [ "${pnames[j]}" == "$pname" ]; then
				found=1; break
			fi
		done
		if (( found==0 )); then
			pnames=(${pnames[*]} $pname)
		fi

		#now check for matches in descriptions.
		found=0	
		eval "new_arr=(\${${pname}[*]})"
		for ((j=0;j<${#new_arr[*]};j++)); do
			if [ "${new_arr[j]}" == "$sdescr" ]; then
				found=1; break
			fi
		done
		
		#if no duplicates found, update the description array $pname.
		if (( found==0 )); then
			eval "$pname=(\${${pname}[*]} `string_rep \"$sdescr\"`)"
		fi		
	done
	for ((i=0; i<${#pnames[*]}; i++));do
		pname=${pnames[i]}
		eval "new_arr=(\${${pname}[*]})" #array with update candidates. 
		#prefix is necessary to differentiate between hard-coded and custom descriptions.
		name=${pnames[i]}
		old_name=${name#"P_"}
		uname=U_$old_name	#uname contains new ID lists
		eval "old_arr=(\${${old_name}[*]})"
		for((j=0;j<${#new_arr[*]}; j++)); do
			match=0
			for((k=4;k<${#old_arr[*]};k++));do
				if [ "${new_arr[j]}" == "${old_arr[k]}" ]; then match=1; break; fi
			done
			if (( match == 0 )); then
				#update event occurs.
				res=1
				eval "$uname=(\${$uname[*]} '${new_arr[j]}')"
			fi
		done
	done
	echo $res
set +x
}
function print_usage
{
	echo "List HOF scan attributes"
	echo "Usage: slist <command>"
	echo "------------------------------------"
	echo "List commands"
	echo "li: 		list id's"
	echo "lc: 		list category"
	echo "lq: 		list quality"
	echo "------------------------------------"
	echo "Update commands"
	echo "u <file>:	update HOF descriptions from a file" 
	echo "------------------------------------"
	echo "Query commands"
	echo "qd <descr>:	query scan info from description"
	echo "qi <lib id>:	query scan info from scanlib ID"
	echo "qc <cat>:		list scan ID's for the given category"	
	echo "------------------------------------"
	echo "e.g. \"slist qd TRASWI\" prints scan ID, category, etc for SWI scans"
	exit -1
}


if [ -z "$1" ]; then
	print_usage
fi

tstart
mode=$1
qd=""
qn=""
qi=""
qc=""

if [ "$1" == "qd" ]; then qd="$2"
elif [ "$1" == "qi" ]; then qi="$2"
elif [ "$1" == "u" ]; then usf="$2"
elif [ "$1" == "qc" ]; then qc="$2"
fi

if [ "$mode" == "qd" -o "$mode" == "qi" -o "$mode" == "u" -o "$mode" == "qc" ]; then
	if [ -z "$2" ]; then print_usage; fi
fi

#determine script path.

pushd `dirname $0` > /dev/null
RC=`pwd`
if [ -z "$HOF_DB" ]; then
	HOF_DB=~/.hof_db
fi

popd > /dev/null


f=$RC/scan_types.txt
uf=$HOF_DB/hofid_udescr #listing of user-submitted descriptors
lf=$HOF_DB/.hofid_udescr.exclusivelock

no=0
first=0
while read line; do #start while
	if (( first == 0 )); then first=1; continue; fi
	vals=( $line )
	id[no]=${vals[0]}
	cat[no]=${vals[1]}
	qual[no]=${vals[2]}	
#	set -x
#	tmp=`string_rep "$line"`
#	eval "${id[no]}=( $no `string_rep \"$line\"` )"
	eval "${id[no]}=( $no \${vals[*]} )"
#	set +x
	(( ++no ))
#	echo -n 'id[no]:' ${id[no]}
#	echo ${!id[*]}
done < $f #end while

#echo MPRAGE=${MPRAGE[*]}
#echo TRA_T1_25mm[10]=${TRA_T1_25mm[10]}
#echo TRA_T1_25mm[*]=${TRA_T1_25mm[*]}

if [ "$mode" == "u" -o "$mode" == "qd" -o "$mode" == "qi" -o "$mode" == "qc" ]; then
	if [ -f "$uf" ]; then 
#		echo waiting for lock, `tend`
		waitlock
#		flock -x -w 20 300 || exit 1
#		echo lock obtained, `tend`
		source $uf
		rmlock
	fi
fi

if [ "$mode" == "u" ]; then

	#listing of descriptor update candidates
	if [ -f "$usf" ]; then source $usf; fi
	#step 1.
	######################
	res=0 #signal if update happened
	 
	for ((i=0; i<${#predef_scans[*]}; i++));do
		#first, create a list of unique update candidate HOF ID's (pnames)
		sid=${predef_scans[i]}
		shofid=${predef_HOF_IDs[i]}
		sdescr=${predef_descrs[i]}
		pname=P_${shofid} #temporary array name holding ID -> descr sequence
		found=0	
		#check for uniqueness in pnames
		for((j=0;j<${#pnames[*]};j++)); do #pnames is created/updated later
			if [ "${pnames[j]}" == "$pname" ]; then
				found=1; break
			fi
		done
		if (( found==0 )); then
			pnames=(${pnames[*]} $pname)
		fi
		#now check for matches in descriptions.
		found=0	
		eval "new_arr=(\${${pname}[*]})"
		for ((j=0;j<${#new_arr[*]};j++)); do
			if [ "${new_arr[j]}" == "$sdescr" ]; then
				found=1; break
			fi
		done
		
		#if no duplicates found, update the description array $pname.
		if (( found==0 )); then
			eval "$pname=(\${${pname}[*]} `string_rep \"$sdescr\"`)"
		fi
	done
	for ((i=0; i<${#pnames[*]}; i++));do
		pname=${pnames[i]}
		eval "new_arr=(\${${pname}[*]})" #array with update candidates. 
		#prefix is necessary to differentiate between hard-coded and custom descriptions.
		name=${pnames[i]}
		old_name=${name#"P_"}
		uname=U_$old_name	#uname contains new ID lists
		eval "old_arr=(\${${old_name}[*]})"
		for((j=0;j<${#new_arr[*]}; j++)); do
			match=0
			for((k=4;k<${#old_arr[*]};k++));do
				if [ "${new_arr[j]}" == "${old_arr[k]}" ]; then match=1; break; fi
			done
			if (( match == 0 )); then
				#update event occurs.
				res=1
				eval "$uname=(\${$uname[*]} '${new_arr[j]}')"
			fi
		done
	done
	set +x
	######################
	echo "res: "$res
	if (( res==1 )); then
		#need to update the $usf.
		#first, unset all HOF ID arrays.
		for ((i=0; i<${#id[*]}; i++)); do
			eval "unset ${id[i]}"
		done
		set -x
		#now populate ID arrays with custom descriptions only.
		olduf=$RC/DB/hofid_udescr.`date +%Y%m%d%H%M%S.%N`.bk
		waitlock
		if [ -f "$uf" ]; then
			source $uf; 
			mv $uf $olduf; 
		fi
		#now iterate over all IDs and update custom ID arrays with calculated on step 1.			
		set +x
		echo ${id[*]}
		echo ${id[0]}
		for ((i=0; i<${#id[*]}; i++)); do
			name=${id[i]}
			uname=U_$name			
			eval "$name=(\${$name[*]} \${$uname[*]})"
			eval "arr=(\${$name[*]})"
			eval "sz=\${#$name[*]}"
			if ((sz>0)); then
				str="`string_rep \"${arr[*]}\"`"
				echo "$name=(\${$name[*]} $str)" >> $uf
			fi
		done
		rmlock
	fi
	if [ -f "$uf" ]; then cat $uf; chmod 770 $uf; fi
	exit 0
fi

if [ "$mode" == "qi" ]; then
	descr=`get_descrs "$qi"`
	eval "qinfo=\"\${$qi[0]} \${$qi[1]} \${$qi[2]} \${$qi[3]}\""
fi

if [ "$mode" == "qd" ]; then
	for((i=0; i<${#id[*]}; i++)); do
		nm=${id[i]}
		eval "arr=(\${$nm[*]})"
		res=`match_descr "${arr[*]}" $qd`
		if [ -n "$res" ]; then
			descr=`get_descrs $nm`
			eval "qinfo=\"\${$nm[0]} \${$nm[1]} \${$nm[2]} \${$nm[3]}\""
			break
		fi
	done
fi


if [ "$mode" == "qc" ]; then
	found_ids=""
	for((i=0; i<${#cat[*]}; i++)); do
		if [ "$qc" == "${cat[i]}" ]; then
			found_ids="${found_ids} ${id[i]}"
		fi
	done
	echo $found_ids
fi

#tend

#echo "qno=$qno"
if [ -n "$qno" -a "$qno" == "$qnomax" ]; then exit -1; fi
case "$mode" in
	"li") echo ${id[*]};;
	"lc") echo ${cat[*]};;
	"lq") echo ${qual[*]};;
#	"qd") echo $qno ${id[$qno]} ${cat[$qno]} ${qual[$qno]};;
	"qd") echo $qinfo | tr -d '\n';;
#	"qi") echo $qno ${id[$qno]} ${cat[$qno]} ${qual[$qno]} ${descr[$qno]};;
	"qi") echo $qinfo $descr | tr -d '\n';;
esac
